version: 2.1

orbs:
  aws-cli: circleci/aws-cli@4.1.1

commands:
    # Exercise - Rollback
  destroy_environment:
    steps:
      - run:
          name: Destroy environment
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            aws cloudformation delete-stack --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"

  revert_migration:
    steps:
      - run:
          name: Rever migration
          when: on_fail
          command: |
            cd ~/project/backend
            npm install
            npm run migrations:revert 
            SUCCESS=$(curl --insecure https://kvdb.io/PxonyffH4zUEbGSb5ZsyAy/migration_${CIRCLE_WORKFLOW_ID:0:7})
            if (( $SUCCESS == 1 ));
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi  
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend: 
    docker: 
      - image: circleci/node:13.8.0
    steps: 
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run: 
          name: Run frontend test
          command: |
            cd frontend 
            npm install 
            npm run test

  test-backend: 
    docker: 
      - image: circleci/node:13.8.0
    steps: 
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run: 
          name: Run backend test
          command: |
            cd backend 
            npm install 
            npm run test

  scan-frontend: 
    docker: 
      - image: circleci/node:13.8.0
    steps: 
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run: 
          name: Run frontend scan
          command: |
            cd frontend 
            npm install 
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical            

  scan-backend: 
    docker: 
      - image: circleci/node:13.8.0
    steps: 
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run: 
          name: Run backend scan
          command: |
            cd backend 
            npm install 
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical

  deploy-infrastructure: 
    docker: 
      - image: amazon/aws-cli
    steps: 
      - checkout
      - run: 
          name: Install packages 
          command: |
            yum install -y tar gzip
      - run:
          name: setup backend infrastructure
          command: |      
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople 
      - run:
          name: setup frontend infrastructure
          command: |        
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople          
      - run: 
          name: Fetch EC2 instance IPs
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible
      - destroy_environment 

  configure-infrastructure: 
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["5a:39:ae:73:a3:44:b5:a8:91:88:42:cf:4e:8d:09:e4"]
      - attach_workspace:
          at: /tmp
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible 
            apk add tar gzip
            pip install awscli
            echo "with .circle only:"
            cat /tmp/project/.circleci/ansible/inventory.txt
      - run:
          name: Configure server
          command: |
            ansible-playbook -i /tmp/project/.circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml

  run-migrations: 
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: | 
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration status to kvdb.io OR memstash.io
          command: |   
            echo "insecure" >> ~/.curlrc
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl https://kvdb.io/PxonyffH4zUEbGSb5ZsyAy/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi

  deploy-frontend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: /tmp
      - run:
          name: Install tar an gzip
          command: |
            apk add tar
            apk add gzip
      - run:
          name: Install node and npm
          command: |
            apk add nodejs
            apk add npm
      - run:
          name: Install awscli
          command: pip install awscli            
      - run:
          name: Install ansible
          command: apk add --update ansible 
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "Backend URL: ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy_environment    
      - revert_migration  
      # Here's where you will add some code to rollback on failure     
  
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["5a:39:ae:73:a3:44:b5:a8:91:88:42:cf:4e:8d:09:e4"]
      - attach_workspace:
          at: /tmp  
      - run:
          name: Install tar an gzip
          command: |
            apk add tar
            apk add gzip
      - run:
          name: Install node and npm
          command: |
            apk add nodejs
            apk add npm
      - run:
          name: Install awscli
          command: pip install awscli            
      - run:
          name: Install ansible
          command: apk add --update ansible  
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            ## Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            echo "Contents  of the inventory.txt file is -------"
            cat /tmp/project/.circleci/ansible/inventory.txt
            ansible-playbook -i /tmp/project/.circleci/ansible/inventory.txt .circleci/ansible/deploy-backend.yml    
      - destroy_environment    
      - revert_migration  

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: | 
            apk add curl
            apk add nodejs
            apk add npm
            pip install awscli
      - run: 
          name: Run backend smoke test
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text)   
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
              return 0
            else
              return 1
            fi   
      - run: 
          name: Run frontend smoke test
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              return 0
            else
              return 1
            fi              
      - destroy_environment    
      - revert_migration 

  cloudfront-update:
    docker: 
      - image: amazon/aws-cli
    steps:
      - checkout 
      - run: 
          name: Install packages 
          command: |
            yum install -y tar gzip
      - run: 
          name: Get old WorkflowID
          command: |
              export OldWorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
              echo OldWorkflowID: "${OldWorkflowID}" 
              echo "${OldWorkflowID}" >> oldworkflowid.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/oldworkflowid.txt    
      - run:
          name: Promote to cloudfront
          command: | 
            cd .circleci/files
            aws cloudformation deploy \
              --template-file cloudfront.yml \
              --stack-name "udapeople-cloudfront" \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople    
      - destroy_environment
  
  cleanup:
    docker: 
      - image: amazon/aws-cli
    steps:
      # - checkout 
      # - run: 
      #     name: Install packages
      #     command: |
      #       yum install -y tar gzip 
      # - attach_workspace:
      #     at: /tmp
      # - run: 
      #     name: get oldworkflowId
      #     command: export OldWorkflowID=$(cat /tmp/project/oldworkflowid.txt)
      - run: 
          name: run cleanup
          command: |
            OldWorkflowID=1 #deleteme

            if [[ "${CIRCLE_WORKFLOW_ID:0:7}" != "${OldWorkflowID}" ]]
            then
              if aws s3 ls "s3://udapeople-${OldWorkflowID}" 2>&1 | grep 'NoSuchBucket' >/dev/null; then
                echo "Bucket does not exist. Skipping deletion."  
              # else
              #   aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              #   aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              #   aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
              fi
            fi

workflows:
  default:
    jobs: 
      # - build-frontend
      # - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend: 
      #     requires: [build-backend]    
      # - scan-frontend:
      #     requires: [build-frontend]
      # - scan-backend: 
      #     requires: [build-backend] 
      # - deploy-infrastructure:
      #     requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      #     filters:
      #       branches:
      #         only: [master]    
      # - configure-infrastructure:
      #     requires: [deploy-infrastructure]     
      # - run-migrations:
      #     requires: [configure-infrastructure]     
      # - deploy-frontend:
      #     requires: [run-migrations]        
      # - deploy-backend:
      #     requires: [run-migrations]      
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]     
      # - cloudfront-update:
      #     requires: [smoke-test]
      - cleanup #:
          #requires: [cloudfront-update]                               
