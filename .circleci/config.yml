version: 2.1

orbs:
  aws-cli: circleci/aws-cli@4.1.1

commands:
    # Exercise - Rollback
  destroy_environment:
    steps:
      - run:
          name: Destroy environment
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
            aws cloudformation delete-stack --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend: 
    docker: 
      - image: circleci/node:13.8.0
    steps: 
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run: 
          name: Run frontend test
          command: |
            cd frontend 
            npm install 
            npm run test

  test-backend: 
    docker: 
      - image: circleci/node:13.8.0
    steps: 
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run: 
          name: Run backend test
          command: |
            cd backend 
            npm install 
            npm run test

  scan-frontend: 
    docker: 
      - image: circleci/node:13.8.0
    steps: 
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run: 
          name: Run frontend scan
          command: |
            cd frontend 
            npm install 
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical            

  scan-backend: 
    docker: 
      - image: circleci/node:13.8.0
    steps: 
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run: 
          name: Run backend scan
          command: |
            cd backend 
            npm install 
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical

  deploy-infrastructure: 
    docker: 
      - image: amazon/aws-cli
    steps: 
      - checkout
      - run: 
          name: Install packages 
          command: |
            yum install -y tar gzip
      - run:
          name: setup backend infrastructure
          command: |      
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople 
      - run:
          name: setup frontend infrastructure
          command: |        
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople          
      - run: 
          name: Fetch EC2 instance IPs
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Project,Values=udacity" \
              --output text >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy_environment 

  configure-infrastructure: 
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["5a:39:ae:73:a3:44:b5:a8:91:88:42:cf:4e:8d:09:e4"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible 
            apk add tar gzip
            pip install awscli
      - run:
          name: Configure server
          command: |
            ansible-playbook -i project/.circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml

  run-migrations: 
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: | 
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration status to kvdb.io OR memstash.io
          command: |   
            echo "insecure" >> ~/.curlrc
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl https://kvdb.io/PxonyffH4zUEbGSb5ZsyAy/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - attach_workspace:
          at: tmp/inventory.txt
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip

      - run:
          name: Get backend url
          command: |
            # your code here
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure     
workflows:
  default:
    jobs: 
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend: 
          requires: [build-backend]    
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend: 
          requires: [build-backend] 
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]    
      - configure-infrastructure:
          requires: [deploy-infrastructure]     
      - run-migrations:
          requires: [configure-infrastructure]                   
